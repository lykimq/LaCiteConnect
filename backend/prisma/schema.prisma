// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User-related enums
enum RoleType {
  guest
  user
  admin
}

enum SessionType {
  session
  persistent
}

// Event-related enums
enum EventStatus {
  draft
  published
  cancelled
  completed
}

enum RegistrationStatus {
  pending
  confirmed
  cancelled
  waitlisted
}

enum NotificationType {
  email
  sms
  push
  all
}

enum TimeSlotStatus {
  available
  reserved
  full
  cancelled
}

// User model
model User {
  id                  String      @id @default(uuid())
  email               String      @unique
  passwordHash        String      @map("password_hash")
  passwordSalt        String      @map("password_salt")
  passwordResetToken  String?     @map("password_reset_token")
  passwordResetExpiry DateTime?   @map("password_reset_expiry")
  adminSecretHash     String?     @map("admin_secret_hash")
  adminSecretSalt     String?     @map("admin_secret_salt")
  firstName           String      @map("first_name")
  lastName            String      @map("last_name")
  fullName            String      @map("full_name")
  phoneNumber         String?     @unique @map("phone_number")
  phoneRegion         String?     @map("phone_region")
  role                RoleType    @default(guest)
  privacySettings     Json        @default("{}") @map("privacy_settings")
  sessionType         SessionType @default(session) @map("session_type")
  biometricEnabled    Boolean     @default(false) @map("biometric_enabled")
  lastLoginAt         DateTime    @default(now()) @map("last_login_at")
  profilePictureUrl   String?     @map("profile_picture_url")
  isGoogleAccount     Boolean     @default(false) @map("is_google_account")
  photoUrl            String?     @map("photo_url")
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")

  // Relations
  createdEvents       Event[]     @relation("CreatedEvents")
  eventRegistrations  EventRegistration[]
  eventShares         EventShare[]

  @@map("users")
  @@index([email])
  @@index([firstName])
  @@index([lastName])
  @@index([fullName])
  @@index([phoneNumber])
  @@index([passwordResetToken])
  @@index([passwordResetExpiry])
}

// Event models
model Event {
  id                  String      @id @default(uuid())
  title               String
  description         String?
  pictureUrl          String?     @map("picture_url")
  address             String
  latitude            Decimal?    @db.Decimal(10, 8)
  longitude           Decimal?    @db.Decimal(11, 8)
  startTime           DateTime    @map("start_time")
  endTime             DateTime    @map("end_time")
  status              EventStatus @default(draft)
  maxParticipants     Int?        @map("max_participants")
  currentParticipants Int         @default(0) @map("current_participants")
  createdBy           String      @map("created_by")
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")

  // Relations
  creator             User                @relation("CreatedEvents", fields: [createdBy], references: [id])
  timeSlots           EventTimeSlot[]
  registrations       EventRegistration[]
  shares              EventShare[]

  @@map("events")
  @@index([status])
  @@index([startTime, endTime])
  @@index([createdBy])
}

model EventTimeSlot {
  id              String          @id @default(uuid())
  eventId         String          @map("event_id")
  startTime       DateTime        @map("start_time")
  endTime         DateTime        @map("end_time")
  maxCapacity     Int             @map("max_capacity")
  currentCapacity Int             @default(0) @map("current_capacity")
  status          TimeSlotStatus  @default(available)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  // Relations
  event           Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  registrations   EventRegistration[]

  @@map("event_time_slots")
  @@index([eventId])
  @@index([status])
}

model EventRegistration {
  id                  String            @id @default(uuid())
  eventId             String            @map("event_id")
  userId              String?           @map("user_id")
  timeSlotId          String?           @map("time_slot_id")
  registrationStatus  RegistrationStatus @default(pending) @map("registration_status")
  firstName           String            @map("first_name")
  lastName            String            @map("last_name")
  email               String
  phoneNumber         String?
  numberOfGuests      Int               @default(0) @map("number_of_guests")
  additionalNotes     String?           @map("additional_notes")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")

  // Relations
  event               Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user                User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  timeSlot            EventTimeSlot?    @relation(fields: [timeSlotId], references: [id], onDelete: SetNull)
  notificationPreferences EventNotificationPreference[]

  @@map("event_registrations")
  @@index([eventId])
  @@index([userId])
  @@index([registrationStatus])
}

model EventNotificationPreference {
  id              String          @id @default(uuid())
  registrationId  String          @map("registration_id")
  notificationType NotificationType @default(email) @map("notification_type")
  reminderTime    DateTime?       @map("reminder_time")
  isActive        Boolean         @default(true) @map("is_active")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  // Relations
  registration    EventRegistration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@map("event_notification_preferences")
  @@index([registrationId])
}

model EventShare {
  id          String    @id @default(uuid())
  eventId     String    @map("event_id")
  sharedById  String?   @map("shared_by")
  platform    String
  shareUrl    String?   @map("share_url")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  sharedBy    User?     @relation(fields: [sharedById], references: [id], onDelete: SetNull)

  @@map("event_shares")
  @@index([eventId])
  @@index([sharedById])
}